#pragma kernel MainCS

//#include "UnityCG.cginc"
#include "./CGINC/SimplexNoise3Db.cginc"


// スレッドグループのスレッドサイズ
#define ThreadBlockSize 256
// アニメーションテーブルのサイズ
#define AnimationLength 16

#define EPSILON 1e-3

// data
struct CubeData
{
    // 座標
    float3 position;
    float3 velocity;
    float4 color;
    float3 basePos;
    float2 uv;
};

// ドカベンロゴのバッファ
RWStructuredBuffer<CubeData> _CubeDataBuffer;//_DokabenDataBuffer;
float _Time;


float rand(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}

float3 curlNoise(float3 coord)
{
    float3 dx = float3(EPSILON, 0.0, 0.0);
    float3 dy = float3(0.0, EPSILON, 0.0);
    float3 dz = float3(0.0, 0.0, EPSILON);

    float3 dpdx0 = simplexNoise(coord - dx);
    float3 dpdx1 = simplexNoise(coord + dx);
    float3 dpdy0 = simplexNoise(coord - dy);
    float3 dpdy1 = simplexNoise(coord + dy);
    float3 dpdz0 = simplexNoise(coord - dz);
    float3 dpdz1 = simplexNoise(coord + dz);

    float x = dpdy1.z - dpdy0.z + dpdz1.y - dpdz0.y;
    float y = dpdz1.x - dpdz0.x + dpdx1.z - dpdx0.z;
    float z = dpdx1.y - dpdx0.y + dpdy1.x - dpdy0.x;

    return float3(x, y, z) / EPSILON * 2.0;
}
			
float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}


[numthreads(ThreadBlockSize, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
    // インデックス取得
    const unsigned int index = id.x;

    // 時間の正弦を算出(ShaderLabの"_SinTime"の代わり)
    // →序にアニメーション開始位置のバッファを加算してアニメーションをずらせるように設定
    //float sinTime = sin((_Time*_AnimationSpeed)+_AnimationStartPositionBuffer[index]);

    // sinTime0~1に正規化 →0~15(コマ数分)の範囲にスケールして要素数として扱う
    //float normal = (sinTime+1)/2;
    // X軸に90度回転
    //float rot = Animation[round(normal*(AnimationLength-1))]*radians(90);

    // 回転行列
    //float sinX = sin(rot);
    //float cosX = cos(rot);

    /*
    float3 pos = _Particles[id].position;

    float3 velocity = CurlNoise(_Particles[id]);

    _Particles[id].velocity = velocity * _SpeedFactor * _CurlNoiseIntencity;
    _Particles[id].position += _Particles[id].velocity * _DeltaTime;

    _Particles[id].time += _DeltaTime;
    float scale = 1.0 - (_Particles[id].time / _Particles[id].lifeTime);
    if (scale < 0)
    {
        _Particles[id].active = false;
        return;
    }

    _Particles[id].scale = scale;
    */
    float3 pos = _CubeDataBuffer[index].position;

    if(_Time==0){
        _CubeDataBuffer[index].velocity = curlNoise(pos) * 0.00001;//0.3;
        _CubeDataBuffer[index].position = _CubeDataBuffer[index].basePos;
    }

    //float s = saturate( (_Time-2.0) * 0.1 );
    
    //float3 pp = _CubeDataBuffer[index].basePos.xyz * snoise(float3(pos.x,pos.y,pos.z+_Time.z));
    //_CubeDataBuffer[index].velocity = s * 0.01 * snoise_grad(pp);
    
    float3 force = curlNoise(pos*0.5) - _CubeDataBuffer[index].velocity.xyz;
    
    _CubeDataBuffer[index].velocity += force * 0.00001;
    _CubeDataBuffer[index].velocity *= 0.99;//force * 0.001;

    _CubeDataBuffer[index].position += _CubeDataBuffer[index].velocity;

    //_CubeDataBuffer[index].position.x = _CubeDataBuffer[index].basePos.x;
    //_CubeDataBuffer[index].position.y = _CubeDataBuffer[index].basePos.y;
    //_CubeDataBuffer[index].position.z = _CubeDataBuffer[index].basePos.z;



    /*
    float3 pos = _Particles[id].position;

    float3 velocity = CurlNoise(_Particles[id]);

    _Particles[id].velocity = velocity * _SpeedFactor * _CurlNoiseIntencity;
    _Particles[id].position += _Particles[id].velocity * _DeltaTime;

    _Particles[id].time += _DeltaTime;
    float scale = 1.0 - (_Particles[id].time / _Particles[id].lifeTime);
    if (scale < 0)
    {
        _Particles[id].active = false;
        return;
    }

    _Particles[id].scale = scale;
    */


    //_CubeDataBuffer[index].Rotation = float2x2(cosX, -sinX, sinX, cosX);

}