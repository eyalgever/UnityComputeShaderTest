#pragma kernel MainCS

//#include "UnityCG.cginc"
#include "SimplexNoise3Db.cginc"


// スレッドグループのスレッドサイズ
#define ThreadBlockSize 64//256
#define EPSILON 1e-3

// data
struct CubeData
{
    float3 position;
    float3 velocity;
    float4 color;
    float3 basePos;
    float2 uv;
    float time;
};

RWStructuredBuffer<CubeData> _CubeDataBuffer;
float _Time;
float4 _Positions[100];
float4 _Velocities[100]; 

float rand(float3 co)
{
    return frac(sin(dot(co.xyz, float3(12.9898, 78.233, 45.5432))) * 43758.5453);
}

float3 curlNoise(float3 coord)
{
    float3 dx = float3(EPSILON, 0.0, 0.0);
    float3 dy = float3(0.0, EPSILON, 0.0);
    float3 dz = float3(0.0, 0.0, EPSILON);

    float3 dpdx0 = simplexNoise(coord - dx);
    float3 dpdx1 = simplexNoise(coord + dx);
    float3 dpdy0 = simplexNoise(coord - dy);
    float3 dpdy1 = simplexNoise(coord + dy);
    float3 dpdz0 = simplexNoise(coord - dz);
    float3 dpdz1 = simplexNoise(coord + dz);

    float x = dpdy1.z - dpdy0.z + dpdz1.y - dpdz0.y;
    float y = dpdz1.x - dpdz0.x + dpdx1.z - dpdx0.z;
    float z = dpdx1.y - dpdx0.y + dpdy1.x - dpdy0.x;

    return float3(x, y, z) / EPSILON * 2.0;
}
			
float rand(float2 co)
{
    return frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453);
}


[numthreads(ThreadBlockSize, 1, 1)]
void MainCS(uint3 id : SV_DispatchThreadID)
{
   
    const unsigned int index = id.x;

    float3 pos = _CubeDataBuffer[index].position;

    if( _CubeDataBuffer[index].time>5){
         _CubeDataBuffer[index].time=0;
        //float3 vv = _CubeDataBuffer[index].basePos.xyz;
        _CubeDataBuffer[index].velocity = - _Velocities[ index%100 ] * 0.02 + 0.008*float4(
            rand(pos.xy)-0.5,
            rand(pos.yz)-0.5,
            rand(pos.zx)-0.5,
            0
        );

        _CubeDataBuffer[index].position = _Positions[ index%100 ];

    }else{
         _CubeDataBuffer[index].time+=0.02;
    }

    float3 force = curlNoise(pos*7) - _CubeDataBuffer[index].velocity.xyz;
    
    _CubeDataBuffer[index].velocity += force * 0.00002;
    _CubeDataBuffer[index].velocity *= 0.97;//force * 0.001;
    _CubeDataBuffer[index].position += _CubeDataBuffer[index].velocity;

}